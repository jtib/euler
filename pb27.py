from numpy import sqrt
from itertools import product

def is_prime(nb):
    k = 2
    while k <= sqrt(nb):
        if nb % k == 0:
            return False
        k += 1
    return True

def list_primes(N):
    """
    Lists all primes below N.
    """
    return [k for k in xrange(2, N) if is_prime(k)]

def len_prime_seq(a, b, N):
    """
    Returns:
    . length of the sequence of primes generated by (a, b)
    . a * b
    """
    f = lambda x: x**2 + a*x + b
    return (len([x for x in xrange(2*N) if is_prime(f(x))]), a*b)

def search_longest(N):
    """
    Returns:
        . a*b s.t. a and b form the longest prime sequence for a, b below N
        . length of that sequence
    """
    l_max = 0
    prod = 0
    prime_list = list_primes(N)
    for a, b in [p for p in product(prime_list, prime_list) if p[0]<p[1]]:
        m = max(len_prime_seq(a, b, N), len_prime_seq(-a, b, N))
        prod = (prod, a*b)[m > l_max]
        l_max = max(l_max, m)
    return (prod, l_max)


